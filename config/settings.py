#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ECшЗкхЛХхМЦуВ╖уВ╣уГЖуГа шинхоЪчобчРЖ
уВ╗уВнуГеуВвуБкчТ░хвГхдЙцХ░уГ╗шинхоЪчобчРЖуГвуВ╕уГеуГ╝уГл
"""

import os
from pathlib import Path
from typing import Optional
from dotenv import load_dotenv

class ECAutomationConfig:
    """ECшЗкхЛХхМЦуВ╖уВ╣уГЖуГашинхоЪуВпуГйуВ╣"""
    
    def __init__(self):
        """шинхоЪхИЭцЬЯхМЦ"""
        # .envуГХуВбуВдуГлшкнуБ┐ш╛╝уБ┐
        env_path = Path(__file__).parent.parent / '.env'
        load_dotenv(env_path)
        
        # уГЗуГРуГГуВ░уГвуГ╝уГЙ
        self.debug_mode = os.getenv('DEBUG_MODE', 'false').lower() == 'true'
        
        # AI APIшинхоЪ
        self.gemini_api_key = os.getenv('GEMINI_API_KEY')
        self.claude_api_key = os.getenv('CLAUDE_API_KEY')
        
        # Amazon SP-APIшинхоЪ
        self.amazon_client_id = os.getenv('AMAZON_CLIENT_ID')
        self.amazon_client_secret = os.getenv('AMAZON_CLIENT_SECRET')
        self.amazon_refresh_token = os.getenv('AMAZON_REFRESH_TOKEN')
        self.amazon_seller_id = os.getenv('AMAZON_SELLER_ID')
        
        # це╜хдйAPIшинхоЪ
        self.rakuten_service_secret = os.getenv('RAKUTEN_SERVICE_SECRET')
        self.rakuten_license_key = os.getenv('RAKUTEN_LICENSE_KEY')
        
        # уВ╖уВ╣уГЖуГашинхоЪ
        self.log_level = os.getenv('LOG_LEVEL', 'INFO')
        self.database_path = os.getenv('DATABASE_PATH', './data/ec_automation.db')

        # NotionшинхоЪ
        self.notion_token = os.getenv('NOTION_TOKEN')
        self.notion_database_id = os.getenv('NOTION_DATABASE_ID')
        
        # уГРуГкуГЗуГ╝уВ╖уГзуГ│хоЯшбМ
        self.validate_config()
    
    def validate_config(self):
        """шинхоЪуГРуГкуГЗуГ╝уВ╖уГзуГ│"""
        missing_configs = []
        
        # х┐ЕщаИшинхоЪуГБуВзуГГуВп
        required_configs = {
            'GEMINI_API_KEY': self.gemini_api_key,
            'CLAUDE_API_KEY': self.claude_api_key,
            'AMAZON_CLIENT_ID': self.amazon_client_id,
            'AMAZON_CLIENT_SECRET': self.amazon_client_secret,
            'RAKUTEN_SERVICE_SECRET': self.rakuten_service_secret,
            'RAKUTEN_LICENSE_KEY': self.rakuten_license_key
        }
        
        for config_name, config_value in required_configs.items():
            if not config_value:
                missing_configs.append(config_name)
        
        if missing_configs:
            print(f"тЪая╕П ф╗еф╕ЛуБочТ░хвГхдЙцХ░уБМшинхоЪуБХуВМуБжуБДуБ╛уБЫуВУ: {', '.join(missing_configs)}")
            print("ЁЯТб .env.example уВТхПВшАГуБл .env уГХуВбуВдуГлуВТф╜ЬцИРуБЧуБжуБПуБауБХуБД")
            
            if not self.debug_mode:
                raise ValueError(f"х┐ЕщаИшинхоЪуБМф╕Нш╢│уБЧуБжуБДуБ╛уБЩ: {missing_configs}")
    
    @property
    def amazon_config(self) -> dict:
        """AmazonшинхоЪхПЦх╛Ч"""
        return {
            'client_id': self.amazon_client_id,
            'client_secret': self.amazon_client_secret,
            'refresh_token': self.amazon_refresh_token,
            'seller_id': self.amazon_seller_id
        }
    
    @property
    def rakuten_config(self) -> dict:
        """це╜хдйшинхоЪхПЦх╛Ч"""
        return {
            'service_secret': self.rakuten_service_secret,
            'license_key': self.rakuten_license_key
        }
    
    @property
    def ai_config(self) -> dict:
        """AIшинхоЪхПЦх╛Ч"""
        return {
            'gemini_api_key': self.gemini_api_key,
            'claude_api_key': self.claude_api_key
        }
    
    def get_database_path(self) -> Path:
        """уГЗуГ╝уВ┐уГЩуГ╝уВ╣уГСуВ╣хПЦх╛Ч"""
        db_path = Path(self.database_path)
        db_path.parent.mkdir(parents=True, exist_ok=True)
        return db_path
    
    def is_production(self) -> bool:
        """цЬмчХкчТ░хвГхИдхоЪ"""
        return not self.debug_mode
    
    def __repr__(self):
        """шинхоЪцГЕха▒шбичд║я╝ИцйЯхпЖцГЕха▒уБпуГЮуВ╣уВпя╝Й"""
        return f"""
ECшЗкхЛХхМЦуВ╖уВ╣уГЖуГашинхоЪ:
тФЬтФАтФА уГЗуГРуГГуВ░уГвуГ╝уГЙ: {self.debug_mode}
тФЬтФАтФА уГнуВ░уГмуГЩуГл: {self.log_level}
тФЬтФАтФА уГЗуГ╝уВ┐уГЩуГ╝уВ╣: {self.database_path}
тФЬтФАтФА Gemini API: {'тЬЕ шинхоЪц╕ИуБ┐' if self.gemini_api_key else 'тЭМ цЬкшинхоЪ'}
тФЬтФАтФА Claude API: {'тЬЕ шинхоЪц╕ИуБ┐' if self.claude_api_key else 'тЭМ цЬкшинхоЪ'}
тФЬтФАтФА Amazon API: {'тЬЕ шинхоЪц╕ИуБ┐' if self.amazon_client_id else 'тЭМ цЬкшинхоЪ'}
тФЬтФАтФА це╜хдйAPI: {'тЬЕ шинхоЪц╕ИуБ┐' if self.rakuten_service_secret else 'тЭМ цЬкшинхоЪ'}
тФФтФАтФА NotionщАгцР║: {'тЬЕ шинхоЪц╕ИуБ┐' if self.notion_database_id else 'тЭМ цЬкшинхоЪ'}
        """.strip()

# уВ░уГнуГ╝уГРуГлшинхоЪуВдуГ│уВ╣уВ┐уГ│уВ╣
config = ECAutomationConfig()

def get_config() -> ECAutomationConfig:
    """шинхоЪхПЦх╛Чя╝ИуВ╖уГ│уВ░уГлуГИуГ│я╝Й"""
    return config

if __name__ == "__main__":
    # шинхоЪуГЖуВ╣уГИ
    print("ЁЯФз ECшЗкхЛХхМЦуВ╖уВ╣уГЖуГашинхоЪуГЖуВ╣уГИ")
    print(config)
